<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/miniquiz/QuizViewFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/miniquiz/QuizViewFragment.java" />
              <option name="originalContent" value="package com.example.miniquiz;&#10;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;public class QuizViewFragment extends Fragment implements AnswersViewFragment.OnAnswerSelectedListener {&#10;    private static final String ARG_ANSWERS = &quot;quiz_arg_answers&quot;;&#10;    private int Score = 0;&#10;    private int QuestionNumber = 0;&#10;    private int TotalQuestions = 0;&#10;    private final QuestionsLibrary questionsLibrary = new QuestionsLibrary(true);&#10;    private Question currentQuestion;&#10;&#10;    public QuizViewFragment() {&#10;        super(R.layout.quiz_view);&#10;    }&#10;&#10;    // Overloaded factory: create QuizViewFragment with custom answers array&#10;    public static QuizViewFragment newInstance(String[] initialAnswers) {&#10;        QuizViewFragment fragment = new QuizViewFragment();&#10;        Bundle args = new Bundle();&#10;        args.putStringArray(ARG_ANSWERS, initialAnswers);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // inicjalizuj liczbę pytań&#10;        TotalQuestions = questionsLibrary.getTotalQuestions();&#10;&#10;        // Reset i ustawienia UI&#10;        resetQuiz();&#10;&#10;        Button resetButton = view.findViewById(R.id.resetButton);&#10;        resetButton.setOnClickListener(v -&gt; {&#10;            resetQuiz();&#10;            loadNextQuestion();&#10;        });&#10;&#10;        // Jeśli przekazano initialAnswers przez argumenty, pokaż je jako pierwszy zestaw odpowiadań&#10;        if (getArguments() != null &amp;&amp; getArguments().containsKey(ARG_ANSWERS)) {&#10;            String[] initial = getArguments().getStringArray(ARG_ANSWERS);&#10;            if (initial == null) initial = new String[]{&quot;&quot;, &quot;&quot;, &quot;&quot;};&#10;            // upewnij się, że ma co najmniej 3 elementy&#10;            if (initial.length &lt; 3) {&#10;                String[] tmp = new String[3];&#10;                for (int i = 0; i &lt; 3; i++) tmp[i] = i &lt; initial.length ? initial[i] : &quot;&quot;;&#10;                initial = tmp;&#10;            }&#10;            getChildFragmentManager().beginTransaction()&#10;                    .setReorderingAllowed(true)&#10;                    .replace(R.id.answers_fragment_container, AnswersViewFragment.newInstance(initial))&#10;                    .commit();&#10;        } else {&#10;            // Załaduj pierwsze pytanie&#10;            loadNextQuestion();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onAnswerSelected(int index) {&#10;        // Sprawdź czy mamy aktualne pytanie&#10;        if (currentQuestion == null) {&#10;            Toast.makeText(getContext(), &quot;Brak pytania.&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (index == currentQuestion.getCorrectAnswerIndex()) {&#10;            Score++;&#10;            Toast.makeText(getContext(), &quot;Poprawna odpowiedź!&quot;, Toast.LENGTH_SHORT).show();&#10;        } else {&#10;            Toast.makeText(getContext(), &quot;Błędna odpowiedź!&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        // Jeżeli aktywność obsługuje wydarzenia, przekaż dalej&#10;        if (getActivity() instanceof AnswersViewFragment.OnAnswerSelectedListener) {&#10;            ((AnswersViewFragment.OnAnswerSelectedListener) getActivity()).onAnswerSelected(index);&#10;        }&#10;&#10;        // Przejdź do następnego pytania&#10;        loadNextQuestion();&#10;    }&#10;&#10;    private void loadNextQuestion() {&#10;        if (QuestionNumber &gt;= TotalQuestions) {&#10;            // Quiz zakończony&#10;            Toast.makeText(getContext(), &quot;Koniec quizu! Twój wynik: &quot; + Score + &quot;/&quot; + TotalQuestions, Toast.LENGTH_LONG).show();&#10;            resetQuiz();&#10;            return;&#10;        }&#10;&#10;        // Pobierz pytanie i zaktualizuj widok&#10;        currentQuestion = questionsLibrary.getQuestion(QuestionNumber);&#10;        if (currentQuestion == null) {&#10;            Toast.makeText(getContext(), &quot;Nie udało się pobrać pytania.&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        View root = getView();&#10;        if (root != null) {&#10;            TextView questionText = root.findViewById(R.id.questionText);&#10;            questionText.setText(currentQuestion.getQuestionText());&#10;&#10;            // Przygotuj opcje odpowiedzi (upewnij się, że jest przynajmniej 3 elementy)&#10;            String[] options = currentQuestion.getAnswerOptions();&#10;            if (options == null) {&#10;                options = new String[]{&quot;&quot;, &quot;&quot;, &quot;&quot;};&#10;            } else if (options.length &lt; 3) {&#10;                String[] tmp = new String[3];&#10;                for (int i = 0; i &lt; 3; i++) tmp[i] = i &lt; options.length ? options[i] : &quot;&quot;;&#10;                options = tmp;&#10;            }&#10;&#10;            // Wstaw AnswersViewFragment z aktualnymi opcjami&#10;            getChildFragmentManager().beginTransaction()&#10;                    .setReorderingAllowed(true)&#10;                    .replace(R.id.answers_fragment_container, AnswersViewFragment.newInstance(options))&#10;                    .commit();&#10;        }&#10;&#10;        // przygotuj index następnego pytania&#10;        QuestionNumber++;&#10;    }&#10;&#10;    private void resetQuiz() {&#10;        Score = 0;&#10;        QuestionNumber = 0;&#10;        currentQuestion = null;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.miniquiz;&#10;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;public class QuizViewFragment extends Fragment implements AnswersViewFragment.OnAnswerSelectedListener {&#10;    private static final String ARG_ANSWERS = &quot;quiz_arg_answers&quot;;&#10;    private int Score = 0;&#10;    private int QuestionNumber = 0;&#10;    private int TotalQuestions = 0;&#10;    private final QuestionsLibrary questionsLibrary = new QuestionsLibrary(true);&#10;    private Question currentQuestion;&#10;&#10;    public QuizViewFragment() {&#10;        super(R.layout.quiz_view);&#10;    }&#10;&#10;    // Overloaded factory: create QuizViewFragment with custom answers array&#10;    public static QuizViewFragment newInstance(String[] initialAnswers) {&#10;        QuizViewFragment fragment = new QuizViewFragment();&#10;        Bundle args = new Bundle();&#10;        args.putStringArray(ARG_ANSWERS, initialAnswers);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // inicjalizuj liczbę pytań&#10;        TotalQuestions = questionsLibrary.getTotalQuestions();&#10;&#10;        // Reset i ustawienia UI&#10;        resetQuiz();&#10;&#10;        Button resetButton = view.findViewById(R.id.resetButton);&#10;        resetButton.setOnClickListener(v -&gt; {&#10;            resetQuiz();&#10;            loadNextQuestion();&#10;        });&#10;&#10;        // Jeśli przekazano initialAnswers przez argumenty, pokaż je jako pierwszy zestaw odpowiadań&#10;        if (getArguments() != null &amp;&amp; getArguments().containsKey(ARG_ANSWERS)) {&#10;            String[] initial = getArguments().getStringArray(ARG_ANSWERS);&#10;            if (initial == null) initial = new String[]{&quot;&quot;, &quot;&quot;, &quot;&quot;};&#10;            // upewnij się, że ma co najmniej 3 elementy&#10;            if (initial.length &lt; 3) {&#10;                String[] tmp = new String[3];&#10;                for (int i = 0; i &lt; 3; i++) tmp[i] = i &lt; initial.length ? initial[i] : &quot;&quot;;&#10;                initial = tmp;&#10;            }&#10;            getChildFragmentManager().beginTransaction()&#10;                    .setReorderingAllowed(true)&#10;                    .replace(R.id.answers_fragment_container, AnswersViewFragment.newInstance(initial))&#10;                    .commit();&#10;        } else {&#10;            // Załaduj pierwsze pytanie&#10;            loadNextQuestion();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onAnswerSelected(int index) {&#10;        // Sprawdź czy mamy aktualne pytanie&#10;        if (currentQuestion == null) {&#10;            Toast.makeText(getContext(), &quot;Brak pytania.&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        if (index == currentQuestion.getCorrectAnswerIndex()) {&#10;            Score++;&#10;            Toast.makeText(getContext(), &quot;Poprawna odpowiedź!&quot;, Toast.LENGTH_SHORT).show();&#10;        } else {&#10;            Toast.makeText(getContext(), &quot;Błędna odpowiedź!&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        // Jeżeli aktywność obsługuje wydarzenia, przekaż dalej&#10;        if (getActivity() instanceof AnswersViewFragment.OnAnswerSelectedListener) {&#10;            ((AnswersViewFragment.OnAnswerSelectedListener) getActivity()).onAnswerSelected(index);&#10;        }&#10;&#10;        // Przejdź do następnego pytania&#10;        loadNextQuestion();&#10;    }&#10;&#10;    private void loadNextQuestion() {&#10;        if (QuestionNumber &gt;= TotalQuestions) {&#10;            // Quiz zakończony&#10;            Toast.makeText(getContext(), &quot;Koniec quizu! Twój wynik: &quot; + Score + &quot;/&quot; + TotalQuestions, Toast.LENGTH_LONG).show();&#10;            resetQuiz();&#10;            return;&#10;        }&#10;&#10;        // Pobierz pytanie i zaktualizuj widok&#10;        currentQuestion = questionsLibrary.getQuestion(QuestionNumber);&#10;        if (currentQuestion == null) {&#10;            Toast.makeText(getContext(), &quot;Nie udało się pobrać pytania.&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        View root = getView();&#10;        if (root != null) {&#10;            TextView questionText = root.findViewById(R.id.questionText);&#10;            questionText.setText(currentQuestion.getQuestionText());&#10;&#10;            // Przygotuj opcje odpowiedzi (upewnij się, że jest przynajmniej 3 elementy)&#10;            String[] options = currentQuestion.getAnswerOptions();&#10;            if (options == null) {&#10;                options = new String[]{&quot;&quot;, &quot;&quot;, &quot;&quot;};&#10;            } else if (options.length &lt; 3) {&#10;                String[] tmp = new String[3];&#10;                for (int i = 0; i &lt; 3; i++) tmp[i] = i &lt; options.length ? options[i] : &quot;&quot;;&#10;                options = tmp;&#10;            }&#10;&#10;            // Wstaw AnswersViewFragment z aktualnymi opcjami&#10;            getChildFragmentManager().beginTransaction()&#10;                    .setReorderingAllowed(true)&#10;                    .replace(R.id.answers_fragment_container, AnswersViewFragment.newInstance(options))&#10;                    .commit();&#10;        }&#10;&#10;        // przygotuj index następnego pytania&#10;        QuestionNumber++;&#10;    }&#10;&#10;    private void resetQuiz() {&#10;        Score = 0;&#10;        QuestionNumber = 0;&#10;        currentQuestion = null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>